name: Deploy to AKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: davinci_can_cen_rg1
  AKS_CLUSTER: k8s-01
  ACR_NAME: davinciai
  NAMESPACE: doc-generator
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: |
        az acr login --name ${{ env.ACR_NAME }}

    - name: Build and push backend image
      run: |
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/davinci-backend:${{ env.IMAGE_TAG }} \
                     -t ${{ env.ACR_NAME }}.azurecr.io/davinci-backend:latest \
                     ./backend
        docker push ${{ env.ACR_NAME }}.azurecr.io/davinci-backend:${{ env.IMAGE_TAG }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/davinci-backend:latest

    - name: Build and push frontend image
      run: |
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/davinci-frontend:${{ env.IMAGE_TAG }} \
                     -t ${{ env.ACR_NAME }}.azurecr.io/davinci-frontend:latest \
                     ./frontend
        docker push ${{ env.ACR_NAME }}.azurecr.io/davinci-frontend:${{ env.IMAGE_TAG }}
        docker push ${{ env.ACR_NAME }}.azurecr.io/davinci-frontend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f k8s/deployment.yaml

    - name: Update deployment images
      run: |
        kubectl set image deployment/davinci-backend davinci-backend=${{ env.ACR_NAME }}.azurecr.io/davinci-backend:${{ env.IMAGE_TAG }} -n ${{ env.NAMESPACE }}
        kubectl set image deployment/davinci-frontend davinci-frontend=${{ env.ACR_NAME }}.azurecr.io/davinci-frontend:${{ env.IMAGE_TAG }} -n ${{ env.NAMESPACE }}

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/davinci-backend -n ${{ env.NAMESPACE }} --timeout=5m
        kubectl rollout status deployment/davinci-frontend -n ${{ env.NAMESPACE }} --timeout=5m

    - name: Get service info
      run: |
        echo "Deployment complete! Service info:"
        kubectl get service -n ${{ env.NAMESPACE }}
        EXTERNAL_IP=$(kubectl get service davinci-frontend -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Application available at: http://$EXTERNAL_IP"
        echo "Or at custom domain: http://docs.davincisolutions.ai"